type App {
  id: String!
  name: String!
  _id: ID!
}

type Stage {
  id: String!
  name: String!
  _id: ID!
}

type Event {
  id: String!
  appId: String!
  stageId: String!
  name: String!
  description: String!
  image: String!
  startsAt: AWSTimestamp!
  endsAt: AWSTimestamp!
  _id: ID!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelAppConnection {
  items: [App]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelAppFilterInput {
  id: ModelStringInput
  name: ModelStringInput
  _id: ModelIDInput
  and: [ModelAppFilterInput]
  or: [ModelAppFilterInput]
  not: ModelAppFilterInput
}

type Query {
  getApp(id: ID!): App
  listApps(filter: ModelAppFilterInput, limit: Int, nextToken: String): ModelAppConnection
  getStage(id: ID!): Stage
  listStages(filter: ModelStageFilterInput, limit: Int, nextToken: String): ModelStageConnection
  getEvent(id: ID!): Event
  listEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String): ModelEventConnection
}

input CreateAppInput {
  id: ID
  name: String!
  _id: ID!
}

input UpdateAppInput {
  id: String!
  name: String
  _id: ID
}

input DeleteAppInput {
  id: ID
}

type Mutation {
  createApp(input: CreateAppInput!, condition: ModelAppConditionInput): App
  updateApp(input: UpdateAppInput!, condition: ModelAppConditionInput): App
  deleteApp(input: DeleteAppInput!, condition: ModelAppConditionInput): App
  createStage(input: CreateStageInput!, condition: ModelStageConditionInput): Stage
  updateStage(input: UpdateStageInput!, condition: ModelStageConditionInput): Stage
  deleteStage(input: DeleteStageInput!, condition: ModelStageConditionInput): Stage
  createEvent(input: CreateEventInput!, condition: ModelEventConditionInput): Event
  updateEvent(input: UpdateEventInput!, condition: ModelEventConditionInput): Event
  deleteEvent(input: DeleteEventInput!, condition: ModelEventConditionInput): Event
}

input ModelAppConditionInput {
  name: ModelStringInput
  _id: ModelIDInput
  and: [ModelAppConditionInput]
  or: [ModelAppConditionInput]
  not: ModelAppConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateApp: App @aws_subscribe(mutations: ["createApp"])
  onUpdateApp: App @aws_subscribe(mutations: ["updateApp"])
  onDeleteApp: App @aws_subscribe(mutations: ["deleteApp"])
  onCreateStage: Stage @aws_subscribe(mutations: ["createStage"])
  onUpdateStage: Stage @aws_subscribe(mutations: ["updateStage"])
  onDeleteStage: Stage @aws_subscribe(mutations: ["deleteStage"])
  onCreateEvent: Event @aws_subscribe(mutations: ["createEvent"])
  onUpdateEvent: Event @aws_subscribe(mutations: ["updateEvent"])
  onDeleteEvent: Event @aws_subscribe(mutations: ["deleteEvent"])
}

type ModelStageConnection {
  items: [Stage]
  nextToken: String
}

input ModelStageFilterInput {
  id: ModelStringInput
  name: ModelStringInput
  _id: ModelIDInput
  and: [ModelStageFilterInput]
  or: [ModelStageFilterInput]
  not: ModelStageFilterInput
}

input CreateStageInput {
  id: ID
  name: String!
  _id: ID!
}

input UpdateStageInput {
  id: String!
  name: String
  _id: ID
}

input DeleteStageInput {
  id: ID
}

input ModelStageConditionInput {
  name: ModelStringInput
  _id: ModelIDInput
  and: [ModelStageConditionInput]
  or: [ModelStageConditionInput]
  not: ModelStageConditionInput
}

type ModelEventConnection {
  items: [Event]
  nextToken: String
}

input ModelEventFilterInput {
  id: ModelStringInput
  appId: ModelStringInput
  stageId: ModelStringInput
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  startsAt: ModelIntInput
  endsAt: ModelIntInput
  _id: ModelIDInput
  and: [ModelEventFilterInput]
  or: [ModelEventFilterInput]
  not: ModelEventFilterInput
}

input CreateEventInput {
  id: ID
  appId: String!
  stageId: String!
  name: String!
  description: String!
  image: String!
  startsAt: AWSTimestamp!
  endsAt: AWSTimestamp!
  _id: ID!
}

input UpdateEventInput {
  id: String!
  appId: String
  stageId: String
  name: String
  description: String
  image: String
  startsAt: AWSTimestamp
  endsAt: AWSTimestamp
  _id: ID
}

input DeleteEventInput {
  id: ID
}

input ModelEventConditionInput {
  appId: ModelStringInput
  stageId: ModelStringInput
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  startsAt: ModelIntInput
  endsAt: ModelIntInput
  _id: ModelIDInput
  and: [ModelEventConditionInput]
  or: [ModelEventConditionInput]
  not: ModelEventConditionInput
}
